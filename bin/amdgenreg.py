#!/usr/bin/env python

ASICREG_DIR = "/home/andres/git/linux/drivers/gpu/drm/amd/include/asic_reg/"
SUPPORTED_BLOCKS = ["gca/gfx_8_0"]

class RegField:
	""" Class to contain register field fata """
	def __init__(self):
		self.name = None
		self.mask = None
		self.shift = None

	def __str__(self):
		fieldspec = '{"' + self.name + '", ' + self.mask + ', ' + self.shift + '}'
		return fieldspec

class Register:
	""" Class to contain register data """

	def __init__(self, name, addr):
		self.name = name
		self.addr = addr
		self.fields = {}

	def __str__(self):
		fieldspec = '{\n'
		for k,v in self.fields.iteritems():
			fieldspec += '\t\t' + str(v) + ',\n'
		if self.fields:
			fieldspec = fieldspec[:-2]
		fieldspec += '\n\t}'

		regspec = '\t{"' + self.name + '", ' + self.addr + ', ' + fieldspec + " }"
		return regspec

class GpuBlock:
	""" Stores all registers for a block """
	def __init__(self, name):
		self.pathBase = ASICREG_DIR + name
		self.name = name.replace('/', '_')
		self.registers = {}

	def importRegDefFile(self, filename):
		with open(filename) as fileObj:
			for line in fileObj:
				if "define" in line and "mm" in line:
					line = " ".join(line.split())
					tokens = line.split(" ");
					name = tokens[1][2:].strip()
					self.registers[name] = Register(name, tokens[2].strip())

	def importRegMaskFile(self, filename):
		with open(filename) as fileObj:
			for line in fileObj:
				if "define" in line and "__" in line:
					line = " ".join(line.split())
					tokens = line.split("__");
					if "_MASK " in line:
						regName = tokens[0].split(" ")[1].strip()
						fieldName = tokens[1].split("_MASK ")[0].strip()
						mask = tokens[1].split("_MASK ")[1].strip()

						if regName in self.registers:
							self.registers[regName].fields[fieldName] = RegField()
							self.registers[regName].fields[fieldName].name = fieldName
							self.registers[regName].fields[fieldName].mask = mask
					if "_SHIFT " in line:
						regName = tokens[0].split(" ")[1].strip()
						fieldName = tokens[1].strip()
						shift = tokens[2].split(" ")[1].strip()

						if regName in self.registers:
							self.registers[regName].fields[fieldName].shift = shift

	def doImport(self):
		self.importRegDefFile(self.pathBase + "_d.h")
		self.importRegMaskFile(self.pathBase + "_sh_mask.h")

	def __str__(self):
		blockspec = "static const RegSpec " + self.name + "_regs[] = {\n"
		for k,v in self.registers.iteritems():
			blockspec += str(v) + ",\n"
		if self.registers:
			blockspec = blockspec[:-2]
		blockspec += '\n};'
		return blockspec


def main():
	gpuBlocks = []
	for blockName in SUPPORTED_BLOCKS:
		block = GpuBlock(blockName)
		block.doImport()
		gpuBlocks.append(block)

	print "/* AUTOGENERATED FILE, DO NOT EDIT MANUALLY */"
	print "namespace gputool {"
	for block in gpuBlocks:
		print str(block)
	print "};"

if __name__ == "__main__":
	main()
